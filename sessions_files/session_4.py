# -*- coding: utf-8 -*-
"""Session_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sbpR4np3FiZm1_Go_rq-EYY8V7-tKqLw

## **Operators**
Arithmetic Operators.

Comparison (Relational) Operators.

Assignment Operators.

Logical Operators.

Bitwise Operators.

Membership Operators.

Identity Operators.

## **Arithmatical Operators**

"+" , "-" , "*" , "/" , "//" , "%"
"""

x = 5
y = 2

# addition
x + y

# Subtication
x - y

# Multiplication
x * y

# Sinlgle division
x / y

# Double division to round the answer in integer value
x // y

# Exponent
x**y

# Modulus
x % y

# Modulus
y % x

"""## **Assignment Operators**

" = "
"""

# assigning
x=x+2
x

# we can write it as
x+=2
x

x = 5
x += 6
x

# using multiplication
x *= 6
x

# using subtraction
x -= 6
x

# using single division
x /= 6
x

# using double division
x //= 6
x

# using modulus
x %= 6
x

x%=2
x

"""## **Comparision Operators**
Equal to (==)

Not equal to (!=)

Greater than (>)

Less than (<)

Greater than or equal to (>=)

Less than or equal to (<=)

Comparison operators in Python compare values and determine relationships between them.

These operators return either True or False. It is based on whether the comparison is true or false, respectively.
"""

# Equal to (==)
x = 4
y = 3
x == y

# Not equal to (!=)

x = 9
y = 4
x != y

# Not equal to (!=) if same values than result will be false
x = 9
y = 9
x != y

# Greater than (>)
x = 20
y = 30
y > x

# Less than (<)
x < y

# Greater than or equal to (>=) Its check two conditions first > and second =
x = 20
y = 30
y >= x

# Greater than or equal to (>=) Its check two conditions first > and second =
x = 30
y = 30
y >= x

# Greater than or equal to (>=) Its check two conditions first > and second =
x = 20
y = 30
y <= x
# Here its check first condition that is < so it gives false

# Less than or equal to (<=)
x = 20
y = 30
y <= x

x = 6
y = 2

x >= y

"""## **Logical Operators**

and

or

not

Python offers three logical operators: and, or, and not. These operators, also known as Boolean operators, evaluate multiple conditions and determine an expression's overall truth value.

"""

# And operators need Both Conditions True For "True"
x = 6
y = 2

x >= 6 and y > 8

# Here Both conditions are True
x = 6
y = 9

x >= 6 and y > 8

# In "OR" loical operator One Condition Should be True
x = 6
y = 9

x >= 6 or y > 8

# In "OR" loical operator One Condition Should be True
x = 6
y = 11

x <= 6 or y == 11

# In "OR" loical operator One Condition Should be True
x = 15
y = 12

x <= 6 or y == 11

# "NOT" Logical operator reverse the Result

not True

not False

# "NOT" operator reverse the result
x = 15
y = 12

not x <= 6 or y == 11

# "NOT" operator reverse the result
x = 15
y = 12

not x >= 6 or y == 11

# "NOT" operator reverse the result
x = 15
y = 12

not (x <= 6 or y == 11)

not 3

if not(42) and "python":
     print("Both operands are truthy")
else:
    print("One or both operands are falsy")

not "Python"

not ""

not " "

"""## **Python Identity Operators**

The identity operators compare the objects to determine whether they share the same memory and refer to the same object type.

'is' Operator

'is not' Operator
"""

# 'is' Operator

list_1 = [1,2,3,4]
list_2 = [1,2,3,4]
list_3 = list_1
# Comparing and printing return values
print(list_1 is list_3)
print(list_1 is list_2)



# Printing IDs of a, b, and c
print("id(a) : ", id(list_1))
print("id(b) : ", id(list_2))
print("id(c) : ", id(list_3))

# 'is not' Operator

a = [1, 2, 3, 4, 5]
b = [1, 2, 3, 4, 5]
c = a

# Comparing and printing return values
print(a is not c)
print(a is not b)

# Printing IDs of a, b, and c
print("id(a) : ", id(a))
print("id(b) : ", id(b))
print("id(c) : ", id(c))

a="TutorialsPoint"
b=a
print ("id(a), id(b):", id(a), id(b))
print ("a is b:", a is b)
print ("b is not a:", b is not a)

"""## **Membership Operators**

"in" operator

"not in" operator"
"""

# "in" operator


var = "TutorialsPoint"
a = "P"
b = "tor"
c = "in"
d = "To"
print (a, "in", var, ":", a in var)
print (b, "in", var, ":", b in var)
print (c, "in", var, ":", c in var)
print (d, "in", var, ":", d in var)

# "not in" operator"

var = "TutorialsPoint"
a = "P"
b = "tor"
c = "in"
d = "To"
print (a, "not in", var, ":", a not in var)
print (b, "not in", var, ":", b not in var)
print (c, "not in", var, ":", c not in var)
print (d, "not in", var, ":", d not in var)

